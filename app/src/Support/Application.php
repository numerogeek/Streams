<?php namespace Streams\Support;

use Composer\Autoload\ClassLoader;
use Illuminate\Support\Facades\Request;
use Streams\Model\ApplicationModel;

class Application
{
    /**
     * The application reference.
     *
     * @var null
     */
    protected $appRef = null;

    /**
     * Create a new Application instance
     */
    public function __construct()
    {
        $this->apps = new ApplicationModel();
    }

    /**
     * Boot the application environment.
     */
    public function boot()
    {
        if ($this->locate()) {
            $this->setTablePrefix();
            $this->registerEntryModels();
            $this->setupAddonManagers();
            $this->setupAssetPaths();
            $this->setupTemplate();
        }

        $this->bindAddonRepository('blocks');
        $this->bindAddonRepository('extensions');
        $this->bindAddonRepository('field_types');
        $this->bindAddonRepository('modules');
        $this->bindAddonRepository('tags');
        $this->bindAddonRepository('themes');
    }

    /**
     * Set the database table prefix going forward.
     * We really don't need a core table from here on out.
     */
    public function setTablePrefix()
    {
        \Schema::getConnection()->getSchemaGrammar()->setTablePrefix($this->getTablePrefix());
        \Schema::getConnection()->setTablePrefix($this->getTablePrefix());
    }

    /**
     * Register entry models generated by streams.
     */
    protected function registerEntryModels()
    {
        $loader = new ClassLoader();

        $loader->addPsr4(
            'Streams\Model\\',
            base_path('app/models/streams/' . $this->getAppRef())
        );

        $loader->register();
    }

    /**
     * Locate the app by request or passed variable and set the application reference.
     *
     * @return bool
     */
    public function locate($domain = null)
    {
        if (!$this->appRef) {
            if (!$domain) {
                $domain = Request::root();
            }

            $domain = trim(str_replace(array('http://', 'https://'), '', $domain), '/');

            if ($app = $this->apps->findByDomain($domain)) {
                $this->appRef = $app->reference;

                return true;
            }

            return false;
        }

        return true;
    }

    /**
     * Setup addon managers.
     */
    protected function setupAddonManagers()
    {
        $addons = array(
            /*'Block',
            'Extension',
            'FieldType',*/
            'Module',
            /*'Tag', */
            'Theme'
        );

        foreach ($addons as $addon) {

            $interface = 'Addon\Module\Addons\Contract\\' . $addon . 'RepositoryInterface';
            $manager   = '\\' . $addon;

            $manager::mergeData(\App::make($interface));
        }
    }

    /**
     * Setup paths for the asset class.
     */
    public function setupAssetPaths()
    {
        $addons = array( /*'Block', 'Extension', 'FieldType', */
            'Module', /*'Tag', */
            'Theme'
        );

        foreach ($addons as $addon) {
            $manager = '\\' . $addon;

            foreach ($manager::getAll()->active() as $addon) {
                \Assets::addPaths($addon->loaderNamespace, $addon->path);
            }
        }
    }

    /**
     * Setup the template.
     */
    protected function setupTemplate()
    {
        $engine   = \App::make('streams.template.engine');
        $template = \App::make('streams.template');

        $theme = \Theme::getAdminTheme();

        if ($theme) {
            $engine->addFolder('theme', $theme->path . '/views');
            $template->layout('theme::layouts/default');

            $template->title = 'Untitled Page';
        }
    }

    /**
     * Bind the repository class for an addon.
     *
     * @param $type
     */
    protected function bindAddonRepository($type)
    {
        $classSegment = \Str::studly(\Str::singular($type));

        $interface  = 'Addon\Module\Addons\Contract\\' . $classSegment . 'RepositoryInterface';
        $repository = 'Addon\Module\Addons\Repository\Streams' . $classSegment . 'Repository';

        \App::singleton($interface, $repository);
    }

    /**
     * Get the current app ref
     *
     * @return null
     */
    public function getAppRef()
    {
        return $this->appRef;
    }

    /**
     * Return the app reference
     *
     * @return string
     */
    public function getTablePrefix()
    {
        if (!$this->appRef) {
            $this->locate();
        }

        return $this->appRef . '_';
    }
}
